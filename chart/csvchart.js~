/*
    Reveal-chart - A plugin to integrate chartjs with revealjs
    Copyright (C) 2013-2015  Sagar DV <dvenkatsagar@gmail.com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

var RevealChart = window.RevealChart || (function(){
	// Get the chart item related to the iframe
	var getOptItem = function(opt,id){
		if (!opt.items){
			return null;
		}
		for (var j = 0; j < opt.items.length; j++){
			if(opt.items[j].selector.substring(1) == id){
				return opt.items[j];
			}
		}
	}

	var initializeCharts = function(){
		// Get all iframes
		var iframes = document.querySelectorAll("iframe");
		for (var i = 0; i < iframes.length; i++ ){
			// check if iframe has data-chart attribute
			if (iframes[i].hasAttribute("data-chart")){
				// load a blank page into iframe
				iframes[i].src = "";
				iframes[i].srcdoc = "";

				// get id of frame
				var id = iframes[i].getAttribute("id").replace(/-/g,"_").toString();
				// create charts object with id as property
				module[id] = {};

				// get iframe document
				module[id].doc = iframes[i].contentDocument || iframes[i].contentWindow.document;

				// write empty canvas as iframe contents
				module[id].doc.open();
				module[id].doc.write('<html><body><canvas></canvas></body></html>');
				module[id].doc.close();

				// create new chart with context
				module[id].item = new Chart(module[id].doc.querySelector("canvas").getContext("2d")); // Is this needed?
				module[id].item.chart = null;

				// get the appropriate item data
				var item = getOptItem(options,iframes[i].getAttribute("id"));
//alert(iframes[i].innerHTML);
				var ctx = module[id].doc.querySelector("canvas").getContext("2d");
				// plot the appropriate graph
				switch(item.type){
					case "line":
//alert(item.data.labels[0] + ", " + item.data.datasets[0].data[0]);
//						module[id].item.chart = module[id].item.Line(item.data,item.options);
						module[id].item.chart = new Chart(ctx, { type: "line", data: item.data, options: item.options}); 
						break;
					case "bar":
//						module[id].item.chart = module[id].item.Bar(item.data,item.options);
						module[id].item.chart =  new Chart(ctx, { type: "bar", data: item.data, options: item.options}); 
						break;
					case "radar":
//						module[id].item.chart = module[id].item.Radar(item.data,item.options);
						module[id].item.chart = new Chart(ctx, { type: "radar", data: item.data, options: item.options}); 
						break;
					case "polararea":
//						module[id].item.chart = module[id].item.PolarArea(item.data,item.options);
						module[id].item.chart = new Chart(ctx, { type: "polararea", data: item.data, options: item.options}); 
						break;
					case "pie":
//						module[id].item.chart = module[id].item.Pie(item.data,item.options);
						module[id].item.chart = new Chart(ctx, { type: "pie", data: item.data, options: item.options}); 
						break;
					case "doughnut":
//						module[id].item.chart = module[id].item.Doughnut(item.data,item.options);
						module[id].item.chart = new Chart(ctx, { type: "doughnut", data: item.data, options: item.options}); 
						break;
				}
			}
		}
	}

	// main
	var module = {};
	// check if chart option is given or not
	var options = Reveal.getConfig().chart || {};
	options.path = options.path || "plugin/chart/Chart.min.js"
	options.items = options.items || [];
	for (var i = 0; i < options.items.length; i++){
		options.items[i].canvas = options.items[i].canvas || {};
		if(["line","bar","radar"].indexOf(options.items[i].type) > -1){
			options.items[i].data = options.items[i].data || {};
		}else{
			options.items[i].data = options.items[i].data || [];
		}
		options.items[i].options = options.items[i].options || {};
		options.items[i].canvas.width = options.items[i].canvas.width || "250px";
		options.items[i].canvas.height = options.items[i].canvas.height || "150px";
	}

	Reveal.addEventListener('ready', function(e1){
		initializeCharts();
		Reveal.addEventListener('slidechanged', function(){
			var iframes = Reveal.getCurrentSlide().querySelectorAll("iframe");
			for (var i = 0; i < iframes.length; i++ ){
				if (iframes[i].hasAttribute("data-chart")){
					// get id of frame
					var id = iframes[i].getAttribute("id").replace(/-/g,"_").toString();
					module[id].item.chart.render();
				}
			}
		
		});
	});
	return module;
})();
