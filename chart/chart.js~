/*
    chart - A plugin to integrate chart.js in revealjs
*/

var RevealChart = window.RevealChart || (function(){
	function parseJSON(str) {
	    var json;
	    try {
        	json = JSON.parse(str);
	    } catch (e) {
        	return null;
    		}
            return json;
	}

	function createChart(canvas, CSV, comments) {
		canvas.chart = null;
		var ctx = canvas.getContext("2d");
		var chartData = { labels: null, datasets: []};
		var chartOptions = { responsive: true };

		if ( comments !== null ) for (var j = 0; j < comments.length; j++ ){
			comments[j] = comments[j].replace(/<!--/,'');
			comments[j] = comments[j].replace(/-->/,'');
			var config = parseJSON(comments[j]);
			if ( config ) {
				if ( config.data ) {
					for (var attrname in config.data) { 
						chartData[attrname] = config.data[attrname]; 
					}
				}
				if ( config.options ) {
					for (var attrname in config.options) { 
						chartOptions[attrname] = config.options[attrname]; 
					}
				}
			}
		}
		
		var legend = null;
		if ( canvas.id ) {
			legend = document.querySelector(".legend[id='" + canvas.id + "']"  ); 
		}

		var lines = CSV.split('\n').filter(function(v){return v!==''});
		// if labels are not defined, get them from first line
		if ( chartData.labels === null && lines.length > 0 ) {
			chartData.labels = lines[0].split(',');
			chartData.labels.shift();
			lines.shift();
		} 
		// get data values
		for (var j = 0; j < lines.length; j++ ){
			if (chartData.datasets.length <= j) chartData.datasets[j] = {};
			chartData.datasets[j].data =  lines[j].split(','); //.filter(function(v){return v!==''});
			chartData.datasets[j].label = chartData.datasets[j].data[0];
			chartData.datasets[j].data.shift();
		}

		// add chart options
		var config = chartConfig[canvas.getAttribute("data-csvchart")];
		if ( config ) {
			for (var j = 0; j < chartData.datasets.length; j++ ){
				for (var attrname in config) {
					if ( !chartData.datasets[j][attrname]  ) {
						chartData.datasets[j][attrname] = config[attrname][j%config[attrname].length];  
					}
				}
			}
		}		

		canvas.chart = new Chart(ctx, { type: canvas.getAttribute("data-csvchart"), data: chartData, options: chartOptions }); 


		if ( legend )  {
//alert(canvas.chart.generateLegend());
			legend.innerHTML = canvas.chart.generateLegend() ;
		}
	}

	var initializeCharts = function(){
		// Get all canvases
		var canvases = document.querySelectorAll("canvas");
		for (var i = 0; i < canvases.length; i++ ){
			// check if canvas has data-chart attribute
			if ( canvases[i].hasAttribute("data-csvchart") ){
				var CSV = canvases[i].innerHTML;
				var comments = CSV.match(/<!--[\s\S]*?-->/g);
				CSV = CSV.replace(/<!--[\s\S]*?-->/g,'').replace(/^\s*\n/gm, "") 

				if ( ! canvases[i].hasAttribute("data-csvchart-src") ) {
					createChart(canvases[i], CSV, comments);
				}
				else {
					var xhr = new XMLHttpRequest();
					xhr.onreadystatechange = function() {
						if( xhr.readyState === 4 ) {
							// file protocol yields status code 0 (useful for local debug, mobile applications etc.)
							if ( ( xhr.status >= 200 && xhr.status < 300 ) || xhr.status === 0 ) {
								createChart(canvases[i], xhr.responseText, comments);
							}
							else {
								content = 'ERROR: The attempt to fetch ' + url + ' failed with HTTP status ' + xhr.status + '.' +
									'Check your browser\'s JavaScript console for more details.' +
									'<p>Remember that you need to serve the presentation HTML from a HTTP server.</p>';
							}
						}
					};

					xhr.open( 'GET', canvases[i].getAttribute("data-csvchart-src"), false );
					try {
						xhr.send();
					}
					catch ( e ) {
						alert( 'Failed to get file ' + canvases[i].getAttribute("data-csvchart-src") + '. Make sure that the presentation and the file are served by a HTTP server and the file can be found there. ' + e );
					}
				}

			} 
		}
	}

	// check if chart option is given or not
	var chartConfig = Reveal.getConfig().chart || {};

	Reveal.addEventListener('ready', function(){
		initializeCharts();
		Reveal.addEventListener('slidechanged', function(){
			var canvases = Reveal.getCurrentSlide().querySelectorAll("canvas");
			for (var i = 0; i < canvases.length; i++ ){
				if (canvases[i].hasAttribute("data-csvchart")){
					// bug redraw canvas - animation doesn't work here
					canvases[i].chart.render();
				}
			}
		
		});
	});
})();
